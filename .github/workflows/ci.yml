name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Frontend Tests & Build
  frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: cd frontend && npm ci
    
    - name: Run ESLint
      run: cd frontend && npm run lint
    
    - name: Run TypeScript check
      run: cd frontend && npm run type-check
    
    - name: Build frontend
      run: cd frontend && npm run build
    
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

  # Backend Tests & Build
  backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached dependencies
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install root
      run: poetry install --no-interaction
    
    - name: Run Black (code formatting check)
      run: poetry run black --check .
    
    - name: Run isort (import sorting check)
      run: poetry run isort --check-only .
    
    - name: Run ruff (linting)
      run: poetry run ruff check .
    
    - name: Run mypy (type checking)
      run: poetry run mypy .
    
    - name: Run pytest (tests)
      run: poetry run pytest
    
    - name: Test CLI commands
      run: |
        poetry run dw-cli --help
        poetry run dw-serve --help

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging (on main branch)
  deploy-staging:
    if: github.ref == 'refs/heads/main'
    needs: [frontend, backend, security]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
    
    - name: Deploy to Vercel (staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: frontend/
        scope: ${{ secrets.VERCEL_ORG_ID }}
    
    - name: Deploy Backend to Railway (staging)
      uses: railwayapp/railway-deploy@v1.0.0
      with:
        railway-token: ${{ secrets.RAILWAY_TOKEN }}
        service: doctor-who-api
        environment: staging

  # Deploy to production (on release)
  deploy-production:
    if: github.event_name == 'release'
    needs: [frontend, backend, security]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
    
    - name: Deploy to Vercel (production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: frontend/
        scope: ${{ secrets.VERCEL_ORG_ID }}
        vercel-args: '--prod'
    
    - name: Deploy Backend to Railway (production)
      uses: railwayapp/railway-deploy@v1.0.0
      with:
        railway-token: ${{ secrets.RAILWAY_TOKEN }}
        service: doctor-who-api
        environment: production

  # Notification
  notify:
    if: always()
    needs: [frontend, backend, security]
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify on success
      if: ${{ needs.frontend.result == 'success' && needs.backend.result == 'success' && needs.security.result == 'success' }}
      run: echo "✅ All checks passed!"
    
    - name: Notify on failure
      if: ${{ needs.frontend.result == 'failure' || needs.backend.result == 'failure' || needs.security.result == 'failure' }}
      run: echo "❌ Some checks failed!"